# Docker Compose file for running paperless from the Docker Hub.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8000.
#
# SQLite is used as the database. The SQLite file is stored in the data volume.
#
# To install and update paperless with this file, do the following:
#
# - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
#   and '.env' into a folder.
# - Run 'docker compose pull'.
# - Run 'docker compose run --rm webserver createsuperuser' to create a user.
# - Run 'docker compose up -d'.
#
# For more extensive installation and update instructions, refer to the
# documentation.

services:
  broker:
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - redisdata:/data

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - broker
    ports:
      - "8000:8000"
    volumes:
      - data:/usr/src/paperless/data
      - media:/usr/src/paperless/media
      - ./export:/usr/src/paperless/export
      - ./consume:/usr/src/paperless/consume
    env_file: docker-compose.env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
  ollamaprocessor:
    image: rest:debug
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./
        target: /app
    ports:
      - "4000:5000"
      - "5679:5679"
    env_file: ollama-debug.env

volumes:
  data:
  media:
  redisdata:

# version: '3'
# services:
#   app:
#     container_name: app
#     command: python -u app.py
#     build:
#       context: ./
#       dockerfile: Dockerfile
#     restart: unless-stopped
#     networks:
#       - frontend
#       - backend
#     ports:
#       - 4000:4000
#       - 5679:5679 
#     volumes:
#       - ./:/app
#       - /etc/localtime:/etc/localtime
#     entrypoint: [ "python", "-m", "debugpy", "--listen", "0.0.0.0:5679", "-m", "app",  "--wait-for-client", "--multiprocess", "-m", "flask", "run", "-h", "0.0.0.0", "-p", "4000" ]
# networks:
#   frontend:
#     driver: bridge
#   backend:
#     driver: bridge